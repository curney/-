from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
import requests
import webbrowser
import time
import re
import pymysql
from bs4 import BeautifulSoup
from selenium import webdriver

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'
                  ' Chrome/73.0.3683.103 Safari/537.36',
    'Accept': '*/*',
    'Connection': 'keep-alive',
    }

# 声明并调用浏览器 并打开一个页面
browser = webdriver.Chrome()
# browser.get("http://www.baidu.com")
current_handle = browser.current_window_handle

# 连接数据库获取将要自动登录的网页
db = pymysql.connect("localhost", "root", "root", "ffy")
cursor = db.cursor()
cursor.execute("SELECT website,account,password from sheet1")
cursor.scroll(2719, mode='absolute')
cursor.scroll(1, mode='relative')
row = cursor.fetchmany(20)
# print(cursor.lastrowid)

# firstPage = row[0].replace("login.php", "admin/post-new.php")
# url = row[0]
# # 打开页面为了加载value的值
# session = requests.Session()
# session.post(url, headers=headers, verify=False)


def check_url(fake_url):
    sessions = requests.session()
    sessions.headers = headers
    rs = sessions.get(fake_url, headers=headers, timeout=20, verify=False)
    if rs is None:
        return 1
    else:
        if rs.url == fake_url:
            return 0
        else:
            return 1
# # 检查url是否为管理员页面 是则调用浏览器打开否则跳过 查询下一条记录


# def is_login(real_acc, real_pw):
#     try:
#         input_str = browser.find_element_by_id('user_login')
#         if input_str is None:
#             print('没登录框啊')
#         else:
#             input_str.send_keys(real_acc)
#             input_str = browser.find_element_by_id('user_pass')
#             input_str.send_keys(real_pw)
#             time.sleep(1)
#             button = browser.find_element_by_id('wp-submit')
#             button.click()
#     except TimeoutException:
#         print('time out after 30 seconds when loading page')
#         browser.execute_script('window.stop()')


def login_data(real_url):
    browser.get(real_url)
    # browser.implicitly_wait(2)


def input_str(acc, pwd):
    try:
        flag = browser.find_element_by_id('user_login')
        print(flag)
        if flag is None:
            browser.execute_script('window.stop()')
        else:
            browser.find_element_by_id('user_login').send_keys(acc)
            browser.find_element_by_id('user_pass').send_keys(pwd)
            browser.find_element_by_id('wp-submit').click()
    except NoSuchElementException:
        browser.execute_script('window.stop()')
        print('查找登录框失败')


def open_new_window():
    new_window = "window.open('about:blank')"
    # browser.set_page_load_timeout(6)
    browser.execute_script(new_window)
    all_handles = browser.window_handles
    for new_handle in all_handles:
        if new_handle != current_handle:
            browser.switch_to.window(new_handle)


for s in row:
    try:
        # is_flag = check_url(s[0])
        login_data(s[0])
        time.sleep(0.5)
        input_str(s[1], s[2])
        time.sleep(0.5)
        open_new_window()
        # is_login(s[1], s[2])
    except requests.exceptions.ProxyError:
        continue
    except requests.exceptions.ReadTimeout:
        continue
    except requests.exceptions.ConnectionError:
        continue
    except requests.exceptions.TooManyRedirects:
        continue

# def get_form_value():
#     wbdata = requests.get(url).text
#     soup = BeautifulSoup(wbdata, "html.parser")
#     submittag = soup.find_all(id='wp-submit')
#     return submittag[0]
#
# # 获取value值
#
#
# fv = get_form_value()
# fv1 = fv['value']
#
# data = {
#     'log': row[1],
#     'pwd': row[2],
#     'redirect_to': firstPage,
#     'testcookie': '1',
#     'wp-submit': fv1
# }
#
#
# session = requests.Session()
# session.post(url, headers=headers, data=data, verify=False)
# # 登录后，我们需要获取另一个网页中的内容
#
# response = session.get(firstPage, headers=headers)
#
#
# def input_content():
#     wbdata = requests.get(url).text
#     soup = BeautifulSoup(wbdata, "html.parser")
#     textarea = soup.find_all('textarea', id=re.compile('content'))
#     return textarea
# # 获取内容和题目的输入框  并将数据库的数据传给他们
#
#
# # text = input_content()
# # print(text)
#
#
# # print(response.text)
#     cursor.close()
#     db.close()
